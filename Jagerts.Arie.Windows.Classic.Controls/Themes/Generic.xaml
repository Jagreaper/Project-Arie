<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Jagerts.Arie.Windows.Classic.Controls"
    xmlns:converters="clr-namespace:Jagerts.Arie.Windows.Classic.Controls.Converters">

    <SolidColorBrush x:Key="ArieMainBackgroundBrush">#FF666666</SolidColorBrush>
    <SolidColorBrush x:Key="ArieMainBorderBrush">#FF555555</SolidColorBrush>
    <SolidColorBrush x:Key="ArieMainContentBrush">#FFFFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="ArieHoverBackgroundBrush">#FF777777</SolidColorBrush>
    <SolidColorBrush x:Key="ArieHoverBorderBrush">#FF666666</SolidColorBrush>
    <SolidColorBrush x:Key="ArieHoverContentBrush">#FFFFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="ArieSelectedBackgroundBrush">#FF888888</SolidColorBrush>
    <SolidColorBrush x:Key="ArieSelectedBorderBrush">#FF777777</SolidColorBrush>
    <SolidColorBrush x:Key="ArieSelectedContentBrush">#FFFFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="ArieDisabledBackgroundBrush">#FF555555</SolidColorBrush>
    <SolidColorBrush x:Key="ArieDisabledBorderBrush">#FF444444</SolidColorBrush>
    <SolidColorBrush x:Key="ArieDisabledContentBrush">#7FFFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="ArieCheckedBorderBrush">#FFBBBBBB</SolidColorBrush>
    <SolidColorBrush x:Key="ArieWindowBackgroundBrush">#FF404040</SolidColorBrush>

    <converters:PathButtonPathSizeConverter x:Key="PathButtonPathSizeConverter"/>

    <Style x:Key="{x:Type local:Button}" TargetType="{x:Type local:Button}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:PathButton}" TargetType="{x:Type local:PathButton}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="Stretch" Value="Uniform"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PathButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Path x:Name="Path"
                                          Style="{TemplateBinding PathStyle}" 
                                          Data="{TemplateBinding PathData}" 
                                          Fill="{TemplateBinding Foreground}"
                                          Width="{TemplateBinding FontSize, Converter={StaticResource PathButtonPathSizeConverter}}"
                                          Height="{TemplateBinding FontSize, Converter={StaticResource PathButtonPathSizeConverter}}"/>

                            <ContentPresenter Grid.Column="1" TextBlock.Foreground="{TemplateBinding Foreground}" Margin="10 0 0 0"
                                                      Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="{x:Type local:PathRadioButton}" TargetType="{x:Type local:PathRadioButton}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="Stretch" Value="Uniform"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PathRadioButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Path x:Name="Path"
                                          Style="{TemplateBinding PathStyle}" 
                                          Data="{TemplateBinding PathData}" 
                                          Fill="{TemplateBinding Foreground}"
                                          Width="{TemplateBinding FontSize, Converter={StaticResource PathButtonPathSizeConverter}}"
                                          Height="{TemplateBinding FontSize, Converter={StaticResource PathButtonPathSizeConverter}}"/>

                            <ContentPresenter Grid.Column="1" TextBlock.Foreground="{TemplateBinding Foreground}" Margin="10 0 0 0"
                                                      Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ArieCheckedBorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:RadioButton}" TargetType="{x:Type local:RadioButton}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RadioButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ArieCheckedBorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ArieComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:ComboBox}" TargetType="{x:Type local:ComboBox}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ArieComboBoxItemStyle}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 4"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ComboBox}">
                    <Grid>
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>

                                <ContentPresenter Name="ContentSite" Margin="5 3 23 3" IsHitTestVisible="False"
                                                          HorizontalAlignment="Left" VerticalAlignment="Center"                              
                                                          Content="{TemplateBinding SelectionBoxItem}" 
                                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                                <TextBox Name="PART_EditableTextBox" Margin="3 3 23 3" Visibility="Hidden" Background="Transparent"
                                                 HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True"
                                                 IsReadOnly="{TemplateBinding IsReadOnly}" Foreground="{TemplateBinding Foreground}">

                                    <TextBox.Template>
                                        <ControlTemplate TargetType="{x:Type TextBox}">
                                            <Border Name="PART_ContentHost" Focusable="False"/>
                                        </ControlTemplate>
                                    </TextBox.Template>
                                </TextBox>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                                    <local:ToggleButton x:Name="ToggleButton" ClickMode="Press" Focusable="False" PathData="M 0 0 L 4 4 L 8 0 Z" BorderThickness="0 0 0 0"
                                                        IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                                </StackPanel>
                            </Grid>
                        </Border>

                        <Popup Name="Popup" Placement="Bottom" Focusable="False" AllowsTransparency="True"
                                       IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide">

                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                                              MinWidth="{TemplateBinding ActualWidth}"
                                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border Name="DropDownBorder"/>

                                <ScrollViewer Margin="1" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                        </Trigger>

                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>

                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:ToggleButton}" TargetType="{x:Type local:ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ArieMainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ArieMainBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource ArieMainContentBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Padding" Value="10 7"/>
        <Setter Property="BorderThickness" Value="0 4 0 0"/>

        <Setter Property="PathStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Path}">
                    <Setter Property="Stretch" Value="Uniform"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ToggleButton}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Path Style="{TemplateBinding PathStyle}"
                                      Data="{TemplateBinding PathData}"
                                      Fill="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieHoverBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieHoverBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieHoverContentBrush}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ArieSelectedBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieSelectedBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieSelectedContentBrush}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ArieDisabledBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ArieDisabledBorderBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ArieDisabledContentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
